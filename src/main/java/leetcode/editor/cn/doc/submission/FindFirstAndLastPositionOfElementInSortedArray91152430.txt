class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {lowerBound(nums, target), upperBound(nums, target)};

    }

    int lowerBound(vector<int> &nums, int target){
        if (nums.size() == 0) return -1;

        int left = 0, right = nums.size();
        while (left < right){
            int mid = left + (right - left) / 2;
            if (nums[mid] == target)
                right = mid;
            else if (nums[mid] > target)
                right = mid;
            else if (nums[mid] < target)
                left = mid + 1;
        }
        if (left == nums.size()) return -1;
        return nums[left] == target ? left : -1;
    }

    int upperBound(vector<int> & nums, int target){
        if (nums.size() == 0) return -1;

        int left = 0, right = nums.size();
        while (left < right){
            int mid = left + (right - left) / 2;
            if (nums[mid] == target)
                left = mid + 1;
            else if (nums[mid] > target)
                right = mid;
            else if (nums[mid] < target)
                left = mid + 1;
        }
        if (left == 0) return -1;
        return nums[left - 1] == target ? (left - 1) : -1;
    }
};

//runtime:20 ms
//memory:13.4 MB
